Домашнее задание
Пишем скрипт
Подготовить свои скрипты для решения как минимум одного из следующих кейсов:
1) watchdog с перезагрузкой процесса/сервиса
2) watchdog с отсылкой емэйла
3) анализ логов веб сервера/security лога - (на взлом/скорость ответа/выявление быстрых - медленных запросов, анализ IP адресов и кол-ва запросов от них)
4) крон скрипт с защитой от мультизапуска
5) любой скрипт на ваше усмотрение

Желательно чтобы в скрипте были:
циклы
условия
регекспы
awk
наличие в скрипте трапов и функций
Критерии оценки: любой скрипт - принято
трапы и функции, а также sed и find +1 балл 
************************************************************************************************************************************************

Попалась интересная информация: зависимость типа операционной системы от значения поля ttl (правда не только от ttl там еще ряд других параметров), которое формирует ip пакет.
в очень урезаном варианте как то так:

TTL	Операционная система
54	FreeBSD / BSD
64	Linux
128	Windows
255	Cisco / Solaris


#!/bin/bash

logfile="./scan-os.txt"   # файл куда занисится результат сканирования пула ip адресов

os_id=""                  # переманная определяющая тип ОС

echo "" > $logfile
echo "Type OS    IP HOST   " > $logfile

type_os(){		  # функция принимает 2 входных параметра. 1-й значение поля ttl в icmp фрейме от хоста. 2-й ip адрес хоста. 
	if [ $1 -eq 64 ];
        then
            	os_id="Linux  "
        elif [ $1 -eq 128 ];
        then
            	os_id="Windows"
        elif [ $1 -eq 255 ];
        then
            	os_id="Cisco  "
        else
            	os_id="unknown"
        fi

echo "$os_id   $2   " >> $logfile
return 0

}

		           # Расскладываем на октеты ip адрес хоста с которого производим мониторинг принимая по дефолту что у нас в сети 24-я маска

oct1=$(ip addr|grep "inet "| grep -v '127.0.0.1' | awk '{print $2}' | sed 's/\./ /'| sed 's/\./ /'| sed 's/\./ /'|sed 's/\// /'| awk '{print $1}')
oct2=$(ip addr|grep "inet "| grep -v '127.0.0.1' | awk '{print $2}' | sed 's/\./ /'| sed 's/\./ /'| sed 's/\./ /'|sed 's/\// /'| awk '{print $2}')
oct3=$(ip addr|grep "inet "| grep -v '127.0.0.1' | awk '{print $2}' | sed 's/\./ /'| sed 's/\./ /'| sed 's/\./ /'|sed 's/\// /'| awk '{print $3}')

    for host in {1..16}   #  цикл в котором перебираем пул ip адресов в локальной сети (здесь использовал только 15 адресов для теста) и вычленяем значение ttl
    do
      	host_ip=$oct1.$oct2.$oct3.$host
        echo $host_ip
        ttl=`ping -c 1 $host_ip | awk '{print $6}'| grep ttl | sed 's/ttl=//'`
#        name=`nslookup $host_ip | grep "name = " | sed 's/name = //' | awk '{print $2}'`
        if [ $ttl > 0 ];
        then
            	type_os $ttl $host_ip  # передаем параметры в нашу функцию

        fi

	clear
	cat ~/scan-os.txt
done

exit 0

Результат теста (на локальной виртуальной сети 4 хоста - Centos-7(2 шт.), Ubuntu-14.0,Windows XP)

Type OS    IP HOST   
Linux	  10.0.2.2   
Windows   10.0.2.3   
Linux     10.0.2.4   
Linux     10.0.2.15   
[root@localhost ~]# 
